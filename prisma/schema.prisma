// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Company {
  id       String    @id @default(cuid())
  name     String
  logo     String
  location String
  jobPosts JobPost[]

  @@map("companies")
}

model JobPost {
  id           String     @id @default(cuid())
  position     String
  role         String
  level        String
  location     String
  new          Boolean    @default(true)
  featured     Boolean    @default(true)
  contractType String
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  languages    Language[]
  tools        Tool[]

  createdAt DateTime @default(now())
  companyId String

  @@map("jobposts")
}

model Language {
  id       String    @id @default(cuid())
  name     String    @unique
  jobPosts JobPost[]

  @@map("languages")
}

model Tool {
  id       String    @id @default(cuid())
  name     String    @unique
  jobPosts JobPost[]

  @@map("tools")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
